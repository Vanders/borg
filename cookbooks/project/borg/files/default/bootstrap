#!/bin/bash
#
#      ___________
#     /-/_'/-/_/-/|                   B   O   R   G
#    /'-/-_'/-_//||          << https://github.com/agh/borg >>
#   /__________/|/|
#   |'|_'='-]:+|/||   Sit back and relax, human. Resistance is futile.
#   |-+-|.|_'-'||//   This should be a painless process and before long this
#   |['.[:!+-'=|//    system will be a functional part of the collective.
#   |='!+|-:]|-|/
#    ----------
#
#  Author: Alex Howells <alex@howells.me>
#  Copyright (c) 2014, Aeode Ltd <hello@aeode.com>
#  Please see the LICENSE file in the repository root for further information.
#
BORG="$(cd $(dirname $0)/.. && pwd)"
BERKS_VENDOR="${BORG}/cookbooks/upstream"

function notify() {
  echo "==> $1"
}

function subnotify() {
  echo "     $1"
}

#
# Display a title banner to indicate we're in the bootstrap phase.
#
cat << __EOF__

  <><><><><><><><><><><><><><><><><><><><><><><><><><><>
                     Injection Phase                   
  <><><><><><><><><><><><><><><><><><><><><><><><><><><>

__EOF__

#
# Xcode Command Line Tools
#
if [ ! $(xcode-select -p) ]; then
  notify 'Installing the Xcode Command Line Tools'
  xcode-select --install
else
  notify '👍  Found the Xcode Command Line Tools!'
fi

#
# ChefDK
#
chefdk_version="0.3.2-1"

(test -x /opt/chefdk/bin/chef-solo && 
  (/opt/chefdk/bin/chef --version | grep 0.3.2 2>&1 >/dev/null &&
    (notify "👍  Found the Chef Development Kit!"))) || {

    # If we got this far, then we need to install or upgrade ChefDK.
    notify "Installing the Chef Development Kit (${chefdk_version})"

    # This naively assumes we are running on OSX.
    platform="mac_os_x"
    release="10.8"

    # Perform the download.
    fname="chefdk-${chefdk_version}.dmg"
    url="https://opscode-omnibus-packages.s3.amazonaws.com/$platform/$release/x86_64/$fname"
    subnotify "Downloading ${url}..."
    cd /tmp && curl -L -O $url

    # Perform the install
    test "$platform" = "mac_os_x" && {
      hdiutil attach /tmp/$fname 2>&1 >/dev/null && echo "mounted"
      sudo installer -package "/Volumes/Chef Development Kit/chefdk-${chefdk_version}.pkg" -target /
      hdiutil detach "/Volumes/Chef Development Kit" 2>&1 >/dev/null && rm /tmp/$fname
    }
}

#
# Homebrew
#
if [ ! -d /usr/local/.git ]; then
  notify "🚄  Doesn't look like you have Homebrew. I'll clone that down for you!"
  sudo rm -rf /usr/local
  sudo git clone https://github.com/mxcl/homebrew /usr/local
else
  notify "👍  Looks like you already have Homebrew installed!"
fi

if [ ! -d /opt/homebrew-cask ]; then
  notify "👎  I can't find the necessary directories for Homebrew. Gonna help you create them."
  sudo mkdir -p /Library/Caches/Homebrew /opt/homebrew-cask
else
  notify "👍  Looks like all the extra directories for Homebrew exist!"
fi

if [ $(stat -f "%Su" /usr/local) != "$USER" ]; then
  notify "😠  Permissions on /usr/local look wrong. Gonna help you fix that."
  sudo chown -R $USER:admin /usr/local /Library/Caches/Homebrew /opt/homebrew-cask
else
  notify "👍  Permissions on necessary directories all look good!"
fi

#
# Validation
# Also known as 'checks and balances', or making sure everything worked!
#
type chef-solo >/dev/null 2>&1 || {
  echo >&2 "Expected to find chef-solo but it is missing. Bummer!"
  exit 1
}

type berks >/dev/null 2>&1 || {
  echo >&2 "Expected to find Berkshelf but it is missing. Bummer!"
  exit 1
}

if [ $(stat -f "%Su" /usr/local) != "$USER" ]; then
  echo >&2 "Expected your user to own /usr/local, and you need to fix this!"
  exit 1
fi

if [ ! -d /opt/homebrew-cask ] || [ $(stat -f "%Su" /opt/homebrew-cask) != "$USER" ]; then
  echo >&2 "Expected your user to own /opt/homebrew-cask, and you need to fix this!"
  exit 1
fi

notify "😠  Reinstalling upstream cookbook dependencies with Berkshelf."

if [ -d $BERKS_VENDOR ]; then
  rm -rf $BERKS_VENDOR
fi

berks install -q
berks vendor $BERKS_VENDOR -q
